// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parser.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parser_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parser_2eproto;
namespace MySqlParseService {
class AlterTableResult;
class AlterTableResultDefaultTypeInternal;
extern AlterTableResultDefaultTypeInternal _AlterTableResult_default_instance_;
class AlterTableResult_Item;
class AlterTableResult_ItemDefaultTypeInternal;
extern AlterTableResult_ItemDefaultTypeInternal _AlterTableResult_Item_default_instance_;
class AlterTableResult_OptionsEntry_DoNotUse;
class AlterTableResult_OptionsEntry_DoNotUseDefaultTypeInternal;
extern AlterTableResult_OptionsEntry_DoNotUseDefaultTypeInternal _AlterTableResult_OptionsEntry_DoNotUse_default_instance_;
class CreateTableResult;
class CreateTableResultDefaultTypeInternal;
extern CreateTableResultDefaultTypeInternal _CreateTableResult_default_instance_;
class CreateTableResult_Column;
class CreateTableResult_ColumnDefaultTypeInternal;
extern CreateTableResult_ColumnDefaultTypeInternal _CreateTableResult_Column_default_instance_;
class CreateTableResult_Constrain;
class CreateTableResult_ConstrainDefaultTypeInternal;
extern CreateTableResult_ConstrainDefaultTypeInternal _CreateTableResult_Constrain_default_instance_;
class CreateTableResult_OptionsEntry_DoNotUse;
class CreateTableResult_OptionsEntry_DoNotUseDefaultTypeInternal;
extern CreateTableResult_OptionsEntry_DoNotUseDefaultTypeInternal _CreateTableResult_OptionsEntry_DoNotUse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ResultWrapper;
class ResultWrapperDefaultTypeInternal;
extern ResultWrapperDefaultTypeInternal _ResultWrapper_default_instance_;
class SelectResult;
class SelectResultDefaultTypeInternal;
extern SelectResultDefaultTypeInternal _SelectResult_default_instance_;
}  // namespace MySqlParseService
PROTOBUF_NAMESPACE_OPEN
template<> ::MySqlParseService::AlterTableResult* Arena::CreateMaybeMessage<::MySqlParseService::AlterTableResult>(Arena*);
template<> ::MySqlParseService::AlterTableResult_Item* Arena::CreateMaybeMessage<::MySqlParseService::AlterTableResult_Item>(Arena*);
template<> ::MySqlParseService::AlterTableResult_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::MySqlParseService::AlterTableResult_OptionsEntry_DoNotUse>(Arena*);
template<> ::MySqlParseService::CreateTableResult* Arena::CreateMaybeMessage<::MySqlParseService::CreateTableResult>(Arena*);
template<> ::MySqlParseService::CreateTableResult_Column* Arena::CreateMaybeMessage<::MySqlParseService::CreateTableResult_Column>(Arena*);
template<> ::MySqlParseService::CreateTableResult_Constrain* Arena::CreateMaybeMessage<::MySqlParseService::CreateTableResult_Constrain>(Arena*);
template<> ::MySqlParseService::CreateTableResult_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::MySqlParseService::CreateTableResult_OptionsEntry_DoNotUse>(Arena*);
template<> ::MySqlParseService::Request* Arena::CreateMaybeMessage<::MySqlParseService::Request>(Arena*);
template<> ::MySqlParseService::Response* Arena::CreateMaybeMessage<::MySqlParseService::Response>(Arena*);
template<> ::MySqlParseService::ResultWrapper* Arena::CreateMaybeMessage<::MySqlParseService::ResultWrapper>(Arena*);
template<> ::MySqlParseService::SelectResult* Arena::CreateMaybeMessage<::MySqlParseService::SelectResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MySqlParseService {

// ===================================================================

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);

  // uint32 server_version = 2;
  void clear_server_version();
  static const int kServerVersionFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version() const;
  void set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:MySqlParseService.Request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class ResultWrapper :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.ResultWrapper) */ {
 public:
  ResultWrapper();
  virtual ~ResultWrapper();

  ResultWrapper(const ResultWrapper& from);
  ResultWrapper(ResultWrapper&& from) noexcept
    : ResultWrapper() {
    *this = ::std::move(from);
  }

  inline ResultWrapper& operator=(const ResultWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultWrapper& operator=(ResultWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultWrapper& default_instance();

  enum ResultCase {
    kCreateTableResult = 1,
    kSelectResult = 2,
    kAlterTableResult = 3,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultWrapper* internal_default_instance() {
    return reinterpret_cast<const ResultWrapper*>(
               &_ResultWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ResultWrapper* other);
  friend void swap(ResultWrapper& a, ResultWrapper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResultWrapper* New() const final {
    return CreateMaybeMessage<ResultWrapper>(nullptr);
  }

  ResultWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultWrapper& from);
  void MergeFrom(const ResultWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.ResultWrapper";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MySqlParseService.CreateTableResult create_table_result = 1;
  bool has_create_table_result() const;
  void clear_create_table_result();
  static const int kCreateTableResultFieldNumber = 1;
  const ::MySqlParseService::CreateTableResult& create_table_result() const;
  ::MySqlParseService::CreateTableResult* release_create_table_result();
  ::MySqlParseService::CreateTableResult* mutable_create_table_result();
  void set_allocated_create_table_result(::MySqlParseService::CreateTableResult* create_table_result);

  // .MySqlParseService.SelectResult select_result = 2;
  bool has_select_result() const;
  void clear_select_result();
  static const int kSelectResultFieldNumber = 2;
  const ::MySqlParseService::SelectResult& select_result() const;
  ::MySqlParseService::SelectResult* release_select_result();
  ::MySqlParseService::SelectResult* mutable_select_result();
  void set_allocated_select_result(::MySqlParseService::SelectResult* select_result);

  // .MySqlParseService.AlterTableResult alter_table_result = 3;
  bool has_alter_table_result() const;
  void clear_alter_table_result();
  static const int kAlterTableResultFieldNumber = 3;
  const ::MySqlParseService::AlterTableResult& alter_table_result() const;
  ::MySqlParseService::AlterTableResult* release_alter_table_result();
  ::MySqlParseService::AlterTableResult* mutable_alter_table_result();
  void set_allocated_alter_table_result(::MySqlParseService::AlterTableResult* alter_table_result);

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:MySqlParseService.ResultWrapper)
 private:
  class HasBitSetters;
  void set_has_create_table_result();
  void set_has_select_result();
  void set_has_alter_table_result();

  inline bool has_result() const;
  inline void clear_has_result();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ResultUnion {
    ResultUnion() {}
    ::MySqlParseService::CreateTableResult* create_table_result_;
    ::MySqlParseService::SelectResult* select_result_;
    ::MySqlParseService::AlterTableResult* alter_table_result_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class SelectResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.SelectResult) */ {
 public:
  SelectResult();
  virtual ~SelectResult();

  SelectResult(const SelectResult& from);
  SelectResult(SelectResult&& from) noexcept
    : SelectResult() {
    *this = ::std::move(from);
  }

  inline SelectResult& operator=(const SelectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectResult& operator=(SelectResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectResult* internal_default_instance() {
    return reinterpret_cast<const SelectResult*>(
               &_SelectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SelectResult* other);
  friend void swap(SelectResult& a, SelectResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectResult* New() const final {
    return CreateMaybeMessage<SelectResult>(nullptr);
  }

  SelectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectResult& from);
  void MergeFrom(const SelectResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.SelectResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string from_tables = 1;
  int from_tables_size() const;
  void clear_from_tables();
  static const int kFromTablesFieldNumber = 1;
  const std::string& from_tables(int index) const;
  std::string* mutable_from_tables(int index);
  void set_from_tables(int index, const std::string& value);
  void set_from_tables(int index, std::string&& value);
  void set_from_tables(int index, const char* value);
  void set_from_tables(int index, const char* value, size_t size);
  std::string* add_from_tables();
  void add_from_tables(const std::string& value);
  void add_from_tables(std::string&& value);
  void add_from_tables(const char* value);
  void add_from_tables(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& from_tables() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_from_tables();

  // repeated string functions = 2;
  int functions_size() const;
  void clear_functions();
  static const int kFunctionsFieldNumber = 2;
  const std::string& functions(int index) const;
  std::string* mutable_functions(int index);
  void set_functions(int index, const std::string& value);
  void set_functions(int index, std::string&& value);
  void set_functions(int index, const char* value);
  void set_functions(int index, const char* value, size_t size);
  std::string* add_functions();
  void add_functions(const std::string& value);
  void add_functions(std::string&& value);
  void add_functions(const char* value);
  void add_functions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& functions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_functions();

  // string signature = 3;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // string raw_query = 8;
  void clear_raw_query();
  static const int kRawQueryFieldNumber = 8;
  const std::string& raw_query() const;
  void set_raw_query(const std::string& value);
  void set_raw_query(std::string&& value);
  void set_raw_query(const char* value);
  void set_raw_query(const char* value, size_t size);
  std::string* mutable_raw_query();
  std::string* release_raw_query();
  void set_allocated_raw_query(std::string* raw_query);

  // @@protoc_insertion_point(class_scope:MySqlParseService.SelectResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> from_tables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> functions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResult_Column :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.CreateTableResult.Column) */ {
 public:
  CreateTableResult_Column();
  virtual ~CreateTableResult_Column();

  CreateTableResult_Column(const CreateTableResult_Column& from);
  CreateTableResult_Column(CreateTableResult_Column&& from) noexcept
    : CreateTableResult_Column() {
    *this = ::std::move(from);
  }

  inline CreateTableResult_Column& operator=(const CreateTableResult_Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResult_Column& operator=(CreateTableResult_Column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResult_Column& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResult_Column* internal_default_instance() {
    return reinterpret_cast<const CreateTableResult_Column*>(
               &_CreateTableResult_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateTableResult_Column* other);
  friend void swap(CreateTableResult_Column& a, CreateTableResult_Column& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResult_Column* New() const final {
    return CreateMaybeMessage<CreateTableResult_Column>(nullptr);
  }

  CreateTableResult_Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResult_Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResult_Column& from);
  void MergeFrom(const CreateTableResult_Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResult_Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.CreateTableResult.Column";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string attributes = 3;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:MySqlParseService.CreateTableResult.Column)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResult_Constrain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.CreateTableResult.Constrain) */ {
 public:
  CreateTableResult_Constrain();
  virtual ~CreateTableResult_Constrain();

  CreateTableResult_Constrain(const CreateTableResult_Constrain& from);
  CreateTableResult_Constrain(CreateTableResult_Constrain&& from) noexcept
    : CreateTableResult_Constrain() {
    *this = ::std::move(from);
  }

  inline CreateTableResult_Constrain& operator=(const CreateTableResult_Constrain& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResult_Constrain& operator=(CreateTableResult_Constrain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResult_Constrain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResult_Constrain* internal_default_instance() {
    return reinterpret_cast<const CreateTableResult_Constrain*>(
               &_CreateTableResult_Constrain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CreateTableResult_Constrain* other);
  friend void swap(CreateTableResult_Constrain& a, CreateTableResult_Constrain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResult_Constrain* New() const final {
    return CreateMaybeMessage<CreateTableResult_Constrain>(nullptr);
  }

  CreateTableResult_Constrain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResult_Constrain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResult_Constrain& from);
  void MergeFrom(const CreateTableResult_Constrain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResult_Constrain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.CreateTableResult.Constrain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string columns = 3;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 3;
  const std::string& columns(int index) const;
  std::string* mutable_columns(int index);
  void set_columns(int index, const std::string& value);
  void set_columns(int index, std::string&& value);
  void set_columns(int index, const char* value);
  void set_columns(int index, const char* value, size_t size);
  std::string* add_columns();
  void add_columns(const std::string& value);
  void add_columns(std::string&& value);
  void add_columns(const char* value);
  void add_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_columns();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:MySqlParseService.CreateTableResult.Constrain)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> columns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResult_OptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateTableResult_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateTableResult_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CreateTableResult_OptionsEntry_DoNotUse();
  CreateTableResult_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateTableResult_OptionsEntry_DoNotUse& other);
  static const CreateTableResult_OptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateTableResult_OptionsEntry_DoNotUse*>(&_CreateTableResult_OptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MySqlParseService.CreateTableResult.OptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MySqlParseService.CreateTableResult.OptionsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class CreateTableResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.CreateTableResult) */ {
 public:
  CreateTableResult();
  virtual ~CreateTableResult();

  CreateTableResult(const CreateTableResult& from);
  CreateTableResult(CreateTableResult&& from) noexcept
    : CreateTableResult() {
    *this = ::std::move(from);
  }

  inline CreateTableResult& operator=(const CreateTableResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResult& operator=(CreateTableResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResult* internal_default_instance() {
    return reinterpret_cast<const CreateTableResult*>(
               &_CreateTableResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CreateTableResult* other);
  friend void swap(CreateTableResult& a, CreateTableResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResult* New() const final {
    return CreateMaybeMessage<CreateTableResult>(nullptr);
  }

  CreateTableResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResult& from);
  void MergeFrom(const CreateTableResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.CreateTableResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateTableResult_Column Column;
  typedef CreateTableResult_Constrain Constrain;

  // accessors -------------------------------------------------------

  // repeated .MySqlParseService.CreateTableResult.Column columns = 4;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 4;
  ::MySqlParseService::CreateTableResult_Column* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Column >*
      mutable_columns();
  const ::MySqlParseService::CreateTableResult_Column& columns(int index) const;
  ::MySqlParseService::CreateTableResult_Column* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Column >&
      columns() const;

  // repeated .MySqlParseService.CreateTableResult.Constrain constrains = 5;
  int constrains_size() const;
  void clear_constrains();
  static const int kConstrainsFieldNumber = 5;
  ::MySqlParseService::CreateTableResult_Constrain* mutable_constrains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Constrain >*
      mutable_constrains();
  const ::MySqlParseService::CreateTableResult_Constrain& constrains(int index) const;
  ::MySqlParseService::CreateTableResult_Constrain* add_constrains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Constrain >&
      constrains() const;

  // map<string, string> options = 6;
  int options_size() const;
  void clear_options();
  static const int kOptionsFieldNumber = 6;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_options();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string like_table = 3;
  void clear_like_table();
  static const int kLikeTableFieldNumber = 3;
  const std::string& like_table() const;
  void set_like_table(const std::string& value);
  void set_like_table(std::string&& value);
  void set_like_table(const char* value);
  void set_like_table(const char* value, size_t size);
  std::string* mutable_like_table();
  std::string* release_like_table();
  void set_allocated_like_table(std::string* like_table);

  // string signature = 7;
  void clear_signature();
  static const int kSignatureFieldNumber = 7;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // string raw_query = 8;
  void clear_raw_query();
  static const int kRawQueryFieldNumber = 8;
  const std::string& raw_query() const;
  void set_raw_query(const std::string& value);
  void set_raw_query(std::string&& value);
  void set_raw_query(const char* value);
  void set_raw_query(const char* value, size_t size);
  std::string* mutable_raw_query();
  std::string* release_raw_query();
  void set_allocated_raw_query(std::string* raw_query);

  // bool has_partition = 2;
  void clear_has_partition();
  static const int kHasPartitionFieldNumber = 2;
  bool has_partition() const;
  void set_has_partition(bool value);

  // @@protoc_insertion_point(class_scope:MySqlParseService.CreateTableResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Column > columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Constrain > constrains_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateTableResult_OptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr like_table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_query_;
  bool has_partition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class AlterTableResult_OptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlterTableResult_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlterTableResult_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AlterTableResult_OptionsEntry_DoNotUse();
  AlterTableResult_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AlterTableResult_OptionsEntry_DoNotUse& other);
  static const AlterTableResult_OptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AlterTableResult_OptionsEntry_DoNotUse*>(&_AlterTableResult_OptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MySqlParseService.AlterTableResult.OptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MySqlParseService.AlterTableResult.OptionsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class AlterTableResult_Item :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.AlterTableResult.Item) */ {
 public:
  AlterTableResult_Item();
  virtual ~AlterTableResult_Item();

  AlterTableResult_Item(const AlterTableResult_Item& from);
  AlterTableResult_Item(AlterTableResult_Item&& from) noexcept
    : AlterTableResult_Item() {
    *this = ::std::move(from);
  }

  inline AlterTableResult_Item& operator=(const AlterTableResult_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterTableResult_Item& operator=(AlterTableResult_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlterTableResult_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlterTableResult_Item* internal_default_instance() {
    return reinterpret_cast<const AlterTableResult_Item*>(
               &_AlterTableResult_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AlterTableResult_Item* other);
  friend void swap(AlterTableResult_Item& a, AlterTableResult_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlterTableResult_Item* New() const final {
    return CreateMaybeMessage<AlterTableResult_Item>(nullptr);
  }

  AlterTableResult_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlterTableResult_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlterTableResult_Item& from);
  void MergeFrom(const AlterTableResult_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterTableResult_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.AlterTableResult.Item";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string detail = 4;
  void clear_detail();
  static const int kDetailFieldNumber = 4;
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);

  // @@protoc_insertion_point(class_scope:MySqlParseService.AlterTableResult.Item)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class AlterTableResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.AlterTableResult) */ {
 public:
  AlterTableResult();
  virtual ~AlterTableResult();

  AlterTableResult(const AlterTableResult& from);
  AlterTableResult(AlterTableResult&& from) noexcept
    : AlterTableResult() {
    *this = ::std::move(from);
  }

  inline AlterTableResult& operator=(const AlterTableResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterTableResult& operator=(AlterTableResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlterTableResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlterTableResult* internal_default_instance() {
    return reinterpret_cast<const AlterTableResult*>(
               &_AlterTableResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AlterTableResult* other);
  friend void swap(AlterTableResult& a, AlterTableResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlterTableResult* New() const final {
    return CreateMaybeMessage<AlterTableResult>(nullptr);
  }

  AlterTableResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlterTableResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlterTableResult& from);
  void MergeFrom(const AlterTableResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterTableResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.AlterTableResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlterTableResult_Item Item;

  // accessors -------------------------------------------------------

  // map<string, string> options = 4;
  int options_size() const;
  void clear_options();
  static const int kOptionsFieldNumber = 4;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_options();

  // repeated .MySqlParseService.AlterTableResult.Item items = 5;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 5;
  ::MySqlParseService::AlterTableResult_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::AlterTableResult_Item >*
      mutable_items();
  const ::MySqlParseService::AlterTableResult_Item& items(int index) const;
  ::MySqlParseService::AlterTableResult_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::AlterTableResult_Item >&
      items() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string raw_query = 2;
  void clear_raw_query();
  static const int kRawQueryFieldNumber = 2;
  const std::string& raw_query() const;
  void set_raw_query(const std::string& value);
  void set_raw_query(std::string&& value);
  void set_raw_query(const char* value);
  void set_raw_query(const char* value, size_t size);
  std::string* mutable_raw_query();
  std::string* release_raw_query();
  void set_allocated_raw_query(std::string* raw_query);

  // string signature = 6;
  void clear_signature();
  static const int kSignatureFieldNumber = 6;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // bool modify_partition = 3;
  void clear_modify_partition();
  static const int kModifyPartitionFieldNumber = 3;
  bool modify_partition() const;
  void set_modify_partition(bool value);

  // @@protoc_insertion_point(class_scope:MySqlParseService.AlterTableResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AlterTableResult_OptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > options_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::AlterTableResult_Item > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  bool modify_partition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MySqlParseService.ResultWrapper results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::MySqlParseService::ResultWrapper* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::ResultWrapper >*
      mutable_results();
  const ::MySqlParseService::ResultWrapper& results(int index) const;
  ::MySqlParseService::ResultWrapper* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::ResultWrapper >&
      results() const;

  // @@protoc_insertion_point(class_scope:MySqlParseService.Response)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::ResultWrapper > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string query = 1;
inline void Request::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Request::query() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.Request.query)
  return query_.GetNoArena();
}
inline void Request::set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.Request.query)
}
inline void Request::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.Request.query)
}
inline void Request::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.Request.query)
}
inline void Request::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.Request.query)
}
inline std::string* Request::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.Request.query)
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_query() {
  // @@protoc_insertion_point(field_release:MySqlParseService.Request.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.Request.query)
}

// uint32 server_version = 2;
inline void Request::clear_server_version() {
  server_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request::server_version() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.Request.server_version)
  return server_version_;
}
inline void Request::set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_version_ = value;
  // @@protoc_insertion_point(field_set:MySqlParseService.Request.server_version)
}

// -------------------------------------------------------------------

// ResultWrapper

// .MySqlParseService.CreateTableResult create_table_result = 1;
inline bool ResultWrapper::has_create_table_result() const {
  return result_case() == kCreateTableResult;
}
inline void ResultWrapper::set_has_create_table_result() {
  _oneof_case_[0] = kCreateTableResult;
}
inline void ResultWrapper::clear_create_table_result() {
  if (has_create_table_result()) {
    delete result_.create_table_result_;
    clear_has_result();
  }
}
inline ::MySqlParseService::CreateTableResult* ResultWrapper::release_create_table_result() {
  // @@protoc_insertion_point(field_release:MySqlParseService.ResultWrapper.create_table_result)
  if (has_create_table_result()) {
    clear_has_result();
      ::MySqlParseService::CreateTableResult* temp = result_.create_table_result_;
    result_.create_table_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MySqlParseService::CreateTableResult& ResultWrapper::create_table_result() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.ResultWrapper.create_table_result)
  return has_create_table_result()
      ? *result_.create_table_result_
      : *reinterpret_cast< ::MySqlParseService::CreateTableResult*>(&::MySqlParseService::_CreateTableResult_default_instance_);
}
inline ::MySqlParseService::CreateTableResult* ResultWrapper::mutable_create_table_result() {
  if (!has_create_table_result()) {
    clear_result();
    set_has_create_table_result();
    result_.create_table_result_ = CreateMaybeMessage< ::MySqlParseService::CreateTableResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:MySqlParseService.ResultWrapper.create_table_result)
  return result_.create_table_result_;
}

// .MySqlParseService.SelectResult select_result = 2;
inline bool ResultWrapper::has_select_result() const {
  return result_case() == kSelectResult;
}
inline void ResultWrapper::set_has_select_result() {
  _oneof_case_[0] = kSelectResult;
}
inline void ResultWrapper::clear_select_result() {
  if (has_select_result()) {
    delete result_.select_result_;
    clear_has_result();
  }
}
inline ::MySqlParseService::SelectResult* ResultWrapper::release_select_result() {
  // @@protoc_insertion_point(field_release:MySqlParseService.ResultWrapper.select_result)
  if (has_select_result()) {
    clear_has_result();
      ::MySqlParseService::SelectResult* temp = result_.select_result_;
    result_.select_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MySqlParseService::SelectResult& ResultWrapper::select_result() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.ResultWrapper.select_result)
  return has_select_result()
      ? *result_.select_result_
      : *reinterpret_cast< ::MySqlParseService::SelectResult*>(&::MySqlParseService::_SelectResult_default_instance_);
}
inline ::MySqlParseService::SelectResult* ResultWrapper::mutable_select_result() {
  if (!has_select_result()) {
    clear_result();
    set_has_select_result();
    result_.select_result_ = CreateMaybeMessage< ::MySqlParseService::SelectResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:MySqlParseService.ResultWrapper.select_result)
  return result_.select_result_;
}

// .MySqlParseService.AlterTableResult alter_table_result = 3;
inline bool ResultWrapper::has_alter_table_result() const {
  return result_case() == kAlterTableResult;
}
inline void ResultWrapper::set_has_alter_table_result() {
  _oneof_case_[0] = kAlterTableResult;
}
inline void ResultWrapper::clear_alter_table_result() {
  if (has_alter_table_result()) {
    delete result_.alter_table_result_;
    clear_has_result();
  }
}
inline ::MySqlParseService::AlterTableResult* ResultWrapper::release_alter_table_result() {
  // @@protoc_insertion_point(field_release:MySqlParseService.ResultWrapper.alter_table_result)
  if (has_alter_table_result()) {
    clear_has_result();
      ::MySqlParseService::AlterTableResult* temp = result_.alter_table_result_;
    result_.alter_table_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MySqlParseService::AlterTableResult& ResultWrapper::alter_table_result() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.ResultWrapper.alter_table_result)
  return has_alter_table_result()
      ? *result_.alter_table_result_
      : *reinterpret_cast< ::MySqlParseService::AlterTableResult*>(&::MySqlParseService::_AlterTableResult_default_instance_);
}
inline ::MySqlParseService::AlterTableResult* ResultWrapper::mutable_alter_table_result() {
  if (!has_alter_table_result()) {
    clear_result();
    set_has_alter_table_result();
    result_.alter_table_result_ = CreateMaybeMessage< ::MySqlParseService::AlterTableResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:MySqlParseService.ResultWrapper.alter_table_result)
  return result_.alter_table_result_;
}

inline bool ResultWrapper::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void ResultWrapper::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline ResultWrapper::ResultCase ResultWrapper::result_case() const {
  return ResultWrapper::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SelectResult

// repeated string from_tables = 1;
inline int SelectResult::from_tables_size() const {
  return from_tables_.size();
}
inline void SelectResult::clear_from_tables() {
  from_tables_.Clear();
}
inline const std::string& SelectResult::from_tables(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.SelectResult.from_tables)
  return from_tables_.Get(index);
}
inline std::string* SelectResult::mutable_from_tables(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.SelectResult.from_tables)
  return from_tables_.Mutable(index);
}
inline void SelectResult::set_from_tables(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.SelectResult.from_tables)
  from_tables_.Mutable(index)->assign(value);
}
inline void SelectResult::set_from_tables(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.SelectResult.from_tables)
  from_tables_.Mutable(index)->assign(std::move(value));
}
inline void SelectResult::set_from_tables(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  from_tables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MySqlParseService.SelectResult.from_tables)
}
inline void SelectResult::set_from_tables(int index, const char* value, size_t size) {
  from_tables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.SelectResult.from_tables)
}
inline std::string* SelectResult::add_from_tables() {
  // @@protoc_insertion_point(field_add_mutable:MySqlParseService.SelectResult.from_tables)
  return from_tables_.Add();
}
inline void SelectResult::add_from_tables(const std::string& value) {
  from_tables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MySqlParseService.SelectResult.from_tables)
}
inline void SelectResult::add_from_tables(std::string&& value) {
  from_tables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MySqlParseService.SelectResult.from_tables)
}
inline void SelectResult::add_from_tables(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  from_tables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MySqlParseService.SelectResult.from_tables)
}
inline void SelectResult::add_from_tables(const char* value, size_t size) {
  from_tables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MySqlParseService.SelectResult.from_tables)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SelectResult::from_tables() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.SelectResult.from_tables)
  return from_tables_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SelectResult::mutable_from_tables() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.SelectResult.from_tables)
  return &from_tables_;
}

// repeated string functions = 2;
inline int SelectResult::functions_size() const {
  return functions_.size();
}
inline void SelectResult::clear_functions() {
  functions_.Clear();
}
inline const std::string& SelectResult::functions(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.SelectResult.functions)
  return functions_.Get(index);
}
inline std::string* SelectResult::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.SelectResult.functions)
  return functions_.Mutable(index);
}
inline void SelectResult::set_functions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.SelectResult.functions)
  functions_.Mutable(index)->assign(value);
}
inline void SelectResult::set_functions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.SelectResult.functions)
  functions_.Mutable(index)->assign(std::move(value));
}
inline void SelectResult::set_functions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  functions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MySqlParseService.SelectResult.functions)
}
inline void SelectResult::set_functions(int index, const char* value, size_t size) {
  functions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.SelectResult.functions)
}
inline std::string* SelectResult::add_functions() {
  // @@protoc_insertion_point(field_add_mutable:MySqlParseService.SelectResult.functions)
  return functions_.Add();
}
inline void SelectResult::add_functions(const std::string& value) {
  functions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MySqlParseService.SelectResult.functions)
}
inline void SelectResult::add_functions(std::string&& value) {
  functions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MySqlParseService.SelectResult.functions)
}
inline void SelectResult::add_functions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  functions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MySqlParseService.SelectResult.functions)
}
inline void SelectResult::add_functions(const char* value, size_t size) {
  functions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MySqlParseService.SelectResult.functions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SelectResult::functions() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.SelectResult.functions)
  return functions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SelectResult::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.SelectResult.functions)
  return &functions_;
}

// string signature = 3;
inline void SelectResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SelectResult::signature() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.SelectResult.signature)
  return signature_.GetNoArena();
}
inline void SelectResult::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.SelectResult.signature)
}
inline void SelectResult::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.SelectResult.signature)
}
inline void SelectResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.SelectResult.signature)
}
inline void SelectResult::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.SelectResult.signature)
}
inline std::string* SelectResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.SelectResult.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SelectResult::release_signature() {
  // @@protoc_insertion_point(field_release:MySqlParseService.SelectResult.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SelectResult::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.SelectResult.signature)
}

// string raw_query = 8;
inline void SelectResult::clear_raw_query() {
  raw_query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SelectResult::raw_query() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.SelectResult.raw_query)
  return raw_query_.GetNoArena();
}
inline void SelectResult::set_raw_query(const std::string& value) {
  
  raw_query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.SelectResult.raw_query)
}
inline void SelectResult::set_raw_query(std::string&& value) {
  
  raw_query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.SelectResult.raw_query)
}
inline void SelectResult::set_raw_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.SelectResult.raw_query)
}
inline void SelectResult::set_raw_query(const char* value, size_t size) {
  
  raw_query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.SelectResult.raw_query)
}
inline std::string* SelectResult::mutable_raw_query() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.SelectResult.raw_query)
  return raw_query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SelectResult::release_raw_query() {
  // @@protoc_insertion_point(field_release:MySqlParseService.SelectResult.raw_query)
  
  return raw_query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SelectResult::set_allocated_raw_query(std::string* raw_query) {
  if (raw_query != nullptr) {
    
  } else {
    
  }
  raw_query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_query);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.SelectResult.raw_query)
}

// -------------------------------------------------------------------

// CreateTableResult_Column

// string name = 1;
inline void CreateTableResult_Column::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResult_Column::name() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.Column.name)
  return name_.GetNoArena();
}
inline void CreateTableResult_Column::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.Column.name)
}
inline void CreateTableResult_Column::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResult.Column.name)
}
inline void CreateTableResult_Column::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.Column.name)
}
inline void CreateTableResult_Column::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.Column.name)
}
inline std::string* CreateTableResult_Column::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.Column.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResult_Column::release_name() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResult.Column.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResult_Column::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResult.Column.name)
}

// string type = 2;
inline void CreateTableResult_Column::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResult_Column::type() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.Column.type)
  return type_.GetNoArena();
}
inline void CreateTableResult_Column::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.Column.type)
}
inline void CreateTableResult_Column::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResult.Column.type)
}
inline void CreateTableResult_Column::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.Column.type)
}
inline void CreateTableResult_Column::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.Column.type)
}
inline std::string* CreateTableResult_Column::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.Column.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResult_Column::release_type() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResult.Column.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResult_Column::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResult.Column.type)
}

// repeated string attributes = 3;
inline int CreateTableResult_Column::attributes_size() const {
  return attributes_.size();
}
inline void CreateTableResult_Column::clear_attributes() {
  attributes_.Clear();
}
inline const std::string& CreateTableResult_Column::attributes(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.Column.attributes)
  return attributes_.Get(index);
}
inline std::string* CreateTableResult_Column::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.Column.attributes)
  return attributes_.Mutable(index);
}
inline void CreateTableResult_Column::set_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.Column.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void CreateTableResult_Column::set_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.Column.attributes)
  attributes_.Mutable(index)->assign(std::move(value));
}
inline void CreateTableResult_Column::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.Column.attributes)
}
inline void CreateTableResult_Column::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.Column.attributes)
}
inline std::string* CreateTableResult_Column::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:MySqlParseService.CreateTableResult.Column.attributes)
  return attributes_.Add();
}
inline void CreateTableResult_Column::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResult.Column.attributes)
}
inline void CreateTableResult_Column::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResult.Column.attributes)
}
inline void CreateTableResult_Column::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MySqlParseService.CreateTableResult.Column.attributes)
}
inline void CreateTableResult_Column::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MySqlParseService.CreateTableResult.Column.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateTableResult_Column::attributes() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.CreateTableResult.Column.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateTableResult_Column::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.CreateTableResult.Column.attributes)
  return &attributes_;
}

// -------------------------------------------------------------------

// CreateTableResult_Constrain

// string name = 1;
inline void CreateTableResult_Constrain::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResult_Constrain::name() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.Constrain.name)
  return name_.GetNoArena();
}
inline void CreateTableResult_Constrain::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.Constrain.name)
}
inline void CreateTableResult_Constrain::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResult.Constrain.name)
}
inline void CreateTableResult_Constrain::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.Constrain.name)
}
inline void CreateTableResult_Constrain::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.Constrain.name)
}
inline std::string* CreateTableResult_Constrain::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.Constrain.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResult_Constrain::release_name() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResult.Constrain.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResult_Constrain::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResult.Constrain.name)
}

// string type = 2;
inline void CreateTableResult_Constrain::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResult_Constrain::type() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.Constrain.type)
  return type_.GetNoArena();
}
inline void CreateTableResult_Constrain::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.Constrain.type)
}
inline void CreateTableResult_Constrain::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResult.Constrain.type)
}
inline void CreateTableResult_Constrain::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.Constrain.type)
}
inline void CreateTableResult_Constrain::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.Constrain.type)
}
inline std::string* CreateTableResult_Constrain::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.Constrain.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResult_Constrain::release_type() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResult.Constrain.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResult_Constrain::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResult.Constrain.type)
}

// repeated string columns = 3;
inline int CreateTableResult_Constrain::columns_size() const {
  return columns_.size();
}
inline void CreateTableResult_Constrain::clear_columns() {
  columns_.Clear();
}
inline const std::string& CreateTableResult_Constrain::columns(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.Constrain.columns)
  return columns_.Get(index);
}
inline std::string* CreateTableResult_Constrain::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.Constrain.columns)
  return columns_.Mutable(index);
}
inline void CreateTableResult_Constrain::set_columns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.Constrain.columns)
  columns_.Mutable(index)->assign(value);
}
inline void CreateTableResult_Constrain::set_columns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.Constrain.columns)
  columns_.Mutable(index)->assign(std::move(value));
}
inline void CreateTableResult_Constrain::set_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.Constrain.columns)
}
inline void CreateTableResult_Constrain::set_columns(int index, const char* value, size_t size) {
  columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.Constrain.columns)
}
inline std::string* CreateTableResult_Constrain::add_columns() {
  // @@protoc_insertion_point(field_add_mutable:MySqlParseService.CreateTableResult.Constrain.columns)
  return columns_.Add();
}
inline void CreateTableResult_Constrain::add_columns(const std::string& value) {
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResult.Constrain.columns)
}
inline void CreateTableResult_Constrain::add_columns(std::string&& value) {
  columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResult.Constrain.columns)
}
inline void CreateTableResult_Constrain::add_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MySqlParseService.CreateTableResult.Constrain.columns)
}
inline void CreateTableResult_Constrain::add_columns(const char* value, size_t size) {
  columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MySqlParseService.CreateTableResult.Constrain.columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateTableResult_Constrain::columns() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.CreateTableResult.Constrain.columns)
  return columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateTableResult_Constrain::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.CreateTableResult.Constrain.columns)
  return &columns_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateTableResult

// string name = 1;
inline void CreateTableResult::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResult::name() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.name)
  return name_.GetNoArena();
}
inline void CreateTableResult::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.name)
}
inline void CreateTableResult::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResult.name)
}
inline void CreateTableResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.name)
}
inline void CreateTableResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.name)
}
inline std::string* CreateTableResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResult::release_name() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResult.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResult::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResult.name)
}

// bool has_partition = 2;
inline void CreateTableResult::clear_has_partition() {
  has_partition_ = false;
}
inline bool CreateTableResult::has_partition() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.has_partition)
  return has_partition_;
}
inline void CreateTableResult::set_has_partition(bool value) {
  
  has_partition_ = value;
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.has_partition)
}

// string like_table = 3;
inline void CreateTableResult::clear_like_table() {
  like_table_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResult::like_table() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.like_table)
  return like_table_.GetNoArena();
}
inline void CreateTableResult::set_like_table(const std::string& value) {
  
  like_table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.like_table)
}
inline void CreateTableResult::set_like_table(std::string&& value) {
  
  like_table_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResult.like_table)
}
inline void CreateTableResult::set_like_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  like_table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.like_table)
}
inline void CreateTableResult::set_like_table(const char* value, size_t size) {
  
  like_table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.like_table)
}
inline std::string* CreateTableResult::mutable_like_table() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.like_table)
  return like_table_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResult::release_like_table() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResult.like_table)
  
  return like_table_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResult::set_allocated_like_table(std::string* like_table) {
  if (like_table != nullptr) {
    
  } else {
    
  }
  like_table_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), like_table);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResult.like_table)
}

// repeated .MySqlParseService.CreateTableResult.Column columns = 4;
inline int CreateTableResult::columns_size() const {
  return columns_.size();
}
inline void CreateTableResult::clear_columns() {
  columns_.Clear();
}
inline ::MySqlParseService::CreateTableResult_Column* CreateTableResult::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Column >*
CreateTableResult::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.CreateTableResult.columns)
  return &columns_;
}
inline const ::MySqlParseService::CreateTableResult_Column& CreateTableResult::columns(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.columns)
  return columns_.Get(index);
}
inline ::MySqlParseService::CreateTableResult_Column* CreateTableResult::add_columns() {
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResult.columns)
  return columns_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Column >&
CreateTableResult::columns() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.CreateTableResult.columns)
  return columns_;
}

// repeated .MySqlParseService.CreateTableResult.Constrain constrains = 5;
inline int CreateTableResult::constrains_size() const {
  return constrains_.size();
}
inline void CreateTableResult::clear_constrains() {
  constrains_.Clear();
}
inline ::MySqlParseService::CreateTableResult_Constrain* CreateTableResult::mutable_constrains(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.constrains)
  return constrains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Constrain >*
CreateTableResult::mutable_constrains() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.CreateTableResult.constrains)
  return &constrains_;
}
inline const ::MySqlParseService::CreateTableResult_Constrain& CreateTableResult::constrains(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.constrains)
  return constrains_.Get(index);
}
inline ::MySqlParseService::CreateTableResult_Constrain* CreateTableResult::add_constrains() {
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResult.constrains)
  return constrains_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResult_Constrain >&
CreateTableResult::constrains() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.CreateTableResult.constrains)
  return constrains_;
}

// map<string, string> options = 6;
inline int CreateTableResult::options_size() const {
  return options_.size();
}
inline void CreateTableResult::clear_options() {
  options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateTableResult::options() const {
  // @@protoc_insertion_point(field_map:MySqlParseService.CreateTableResult.options)
  return options_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateTableResult::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:MySqlParseService.CreateTableResult.options)
  return options_.MutableMap();
}

// string signature = 7;
inline void CreateTableResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResult::signature() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.signature)
  return signature_.GetNoArena();
}
inline void CreateTableResult::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.signature)
}
inline void CreateTableResult::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResult.signature)
}
inline void CreateTableResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.signature)
}
inline void CreateTableResult::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.signature)
}
inline std::string* CreateTableResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResult::release_signature() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResult.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResult::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResult.signature)
}

// string raw_query = 8;
inline void CreateTableResult::clear_raw_query() {
  raw_query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResult::raw_query() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResult.raw_query)
  return raw_query_.GetNoArena();
}
inline void CreateTableResult::set_raw_query(const std::string& value) {
  
  raw_query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResult.raw_query)
}
inline void CreateTableResult::set_raw_query(std::string&& value) {
  
  raw_query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResult.raw_query)
}
inline void CreateTableResult::set_raw_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResult.raw_query)
}
inline void CreateTableResult::set_raw_query(const char* value, size_t size) {
  
  raw_query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResult.raw_query)
}
inline std::string* CreateTableResult::mutable_raw_query() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResult.raw_query)
  return raw_query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResult::release_raw_query() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResult.raw_query)
  
  return raw_query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResult::set_allocated_raw_query(std::string* raw_query) {
  if (raw_query != nullptr) {
    
  } else {
    
  }
  raw_query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_query);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResult.raw_query)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AlterTableResult_Item

// string action = 1;
inline void AlterTableResult_Item::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterTableResult_Item::action() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.AlterTableResult.Item.action)
  return action_.GetNoArena();
}
inline void AlterTableResult_Item::set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.AlterTableResult.Item.action)
}
inline void AlterTableResult_Item::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.AlterTableResult.Item.action)
}
inline void AlterTableResult_Item::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.AlterTableResult.Item.action)
}
inline void AlterTableResult_Item::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.AlterTableResult.Item.action)
}
inline std::string* AlterTableResult_Item::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.AlterTableResult.Item.action)
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterTableResult_Item::release_action() {
  // @@protoc_insertion_point(field_release:MySqlParseService.AlterTableResult.Item.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterTableResult_Item::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.AlterTableResult.Item.action)
}

// string type = 2;
inline void AlterTableResult_Item::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterTableResult_Item::type() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.AlterTableResult.Item.type)
  return type_.GetNoArena();
}
inline void AlterTableResult_Item::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.AlterTableResult.Item.type)
}
inline void AlterTableResult_Item::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.AlterTableResult.Item.type)
}
inline void AlterTableResult_Item::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.AlterTableResult.Item.type)
}
inline void AlterTableResult_Item::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.AlterTableResult.Item.type)
}
inline std::string* AlterTableResult_Item::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.AlterTableResult.Item.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterTableResult_Item::release_type() {
  // @@protoc_insertion_point(field_release:MySqlParseService.AlterTableResult.Item.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterTableResult_Item::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.AlterTableResult.Item.type)
}

// string name = 3;
inline void AlterTableResult_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterTableResult_Item::name() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.AlterTableResult.Item.name)
  return name_.GetNoArena();
}
inline void AlterTableResult_Item::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.AlterTableResult.Item.name)
}
inline void AlterTableResult_Item::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.AlterTableResult.Item.name)
}
inline void AlterTableResult_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.AlterTableResult.Item.name)
}
inline void AlterTableResult_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.AlterTableResult.Item.name)
}
inline std::string* AlterTableResult_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.AlterTableResult.Item.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterTableResult_Item::release_name() {
  // @@protoc_insertion_point(field_release:MySqlParseService.AlterTableResult.Item.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterTableResult_Item::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.AlterTableResult.Item.name)
}

// string detail = 4;
inline void AlterTableResult_Item::clear_detail() {
  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterTableResult_Item::detail() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.AlterTableResult.Item.detail)
  return detail_.GetNoArena();
}
inline void AlterTableResult_Item::set_detail(const std::string& value) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.AlterTableResult.Item.detail)
}
inline void AlterTableResult_Item::set_detail(std::string&& value) {
  
  detail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.AlterTableResult.Item.detail)
}
inline void AlterTableResult_Item::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.AlterTableResult.Item.detail)
}
inline void AlterTableResult_Item::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.AlterTableResult.Item.detail)
}
inline std::string* AlterTableResult_Item::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.AlterTableResult.Item.detail)
  return detail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterTableResult_Item::release_detail() {
  // @@protoc_insertion_point(field_release:MySqlParseService.AlterTableResult.Item.detail)
  
  return detail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterTableResult_Item::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.AlterTableResult.Item.detail)
}

// -------------------------------------------------------------------

// AlterTableResult

// string name = 1;
inline void AlterTableResult::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterTableResult::name() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.AlterTableResult.name)
  return name_.GetNoArena();
}
inline void AlterTableResult::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.AlterTableResult.name)
}
inline void AlterTableResult::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.AlterTableResult.name)
}
inline void AlterTableResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.AlterTableResult.name)
}
inline void AlterTableResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.AlterTableResult.name)
}
inline std::string* AlterTableResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.AlterTableResult.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterTableResult::release_name() {
  // @@protoc_insertion_point(field_release:MySqlParseService.AlterTableResult.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterTableResult::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.AlterTableResult.name)
}

// string raw_query = 2;
inline void AlterTableResult::clear_raw_query() {
  raw_query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterTableResult::raw_query() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.AlterTableResult.raw_query)
  return raw_query_.GetNoArena();
}
inline void AlterTableResult::set_raw_query(const std::string& value) {
  
  raw_query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.AlterTableResult.raw_query)
}
inline void AlterTableResult::set_raw_query(std::string&& value) {
  
  raw_query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.AlterTableResult.raw_query)
}
inline void AlterTableResult::set_raw_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.AlterTableResult.raw_query)
}
inline void AlterTableResult::set_raw_query(const char* value, size_t size) {
  
  raw_query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.AlterTableResult.raw_query)
}
inline std::string* AlterTableResult::mutable_raw_query() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.AlterTableResult.raw_query)
  return raw_query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterTableResult::release_raw_query() {
  // @@protoc_insertion_point(field_release:MySqlParseService.AlterTableResult.raw_query)
  
  return raw_query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterTableResult::set_allocated_raw_query(std::string* raw_query) {
  if (raw_query != nullptr) {
    
  } else {
    
  }
  raw_query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_query);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.AlterTableResult.raw_query)
}

// bool modify_partition = 3;
inline void AlterTableResult::clear_modify_partition() {
  modify_partition_ = false;
}
inline bool AlterTableResult::modify_partition() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.AlterTableResult.modify_partition)
  return modify_partition_;
}
inline void AlterTableResult::set_modify_partition(bool value) {
  
  modify_partition_ = value;
  // @@protoc_insertion_point(field_set:MySqlParseService.AlterTableResult.modify_partition)
}

// map<string, string> options = 4;
inline int AlterTableResult::options_size() const {
  return options_.size();
}
inline void AlterTableResult::clear_options() {
  options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AlterTableResult::options() const {
  // @@protoc_insertion_point(field_map:MySqlParseService.AlterTableResult.options)
  return options_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AlterTableResult::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:MySqlParseService.AlterTableResult.options)
  return options_.MutableMap();
}

// repeated .MySqlParseService.AlterTableResult.Item items = 5;
inline int AlterTableResult::items_size() const {
  return items_.size();
}
inline void AlterTableResult::clear_items() {
  items_.Clear();
}
inline ::MySqlParseService::AlterTableResult_Item* AlterTableResult::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.AlterTableResult.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::AlterTableResult_Item >*
AlterTableResult::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.AlterTableResult.items)
  return &items_;
}
inline const ::MySqlParseService::AlterTableResult_Item& AlterTableResult::items(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.AlterTableResult.items)
  return items_.Get(index);
}
inline ::MySqlParseService::AlterTableResult_Item* AlterTableResult::add_items() {
  // @@protoc_insertion_point(field_add:MySqlParseService.AlterTableResult.items)
  return items_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::AlterTableResult_Item >&
AlterTableResult::items() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.AlterTableResult.items)
  return items_;
}

// string signature = 6;
inline void AlterTableResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlterTableResult::signature() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.AlterTableResult.signature)
  return signature_.GetNoArena();
}
inline void AlterTableResult::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.AlterTableResult.signature)
}
inline void AlterTableResult::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.AlterTableResult.signature)
}
inline void AlterTableResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.AlterTableResult.signature)
}
inline void AlterTableResult::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.AlterTableResult.signature)
}
inline std::string* AlterTableResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.AlterTableResult.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlterTableResult::release_signature() {
  // @@protoc_insertion_point(field_release:MySqlParseService.AlterTableResult.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlterTableResult::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.AlterTableResult.signature)
}

// -------------------------------------------------------------------

// Response

// repeated .MySqlParseService.ResultWrapper results = 1;
inline int Response::results_size() const {
  return results_.size();
}
inline void Response::clear_results() {
  results_.Clear();
}
inline ::MySqlParseService::ResultWrapper* Response::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.Response.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::ResultWrapper >*
Response::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.Response.results)
  return &results_;
}
inline const ::MySqlParseService::ResultWrapper& Response::results(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.Response.results)
  return results_.Get(index);
}
inline ::MySqlParseService::ResultWrapper* Response::add_results() {
  // @@protoc_insertion_point(field_add:MySqlParseService.Response.results)
  return results_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::ResultWrapper >&
Response::results() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.Response.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MySqlParseService

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parser_2eproto
