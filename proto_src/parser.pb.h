// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parser.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parser_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parser_2eproto;
namespace MySqlParseService {
class CreateTableResponse;
class CreateTableResponseDefaultTypeInternal;
extern CreateTableResponseDefaultTypeInternal _CreateTableResponse_default_instance_;
class CreateTableResponse_Result;
class CreateTableResponse_ResultDefaultTypeInternal;
extern CreateTableResponse_ResultDefaultTypeInternal _CreateTableResponse_Result_default_instance_;
class CreateTableResponse_Result_Column;
class CreateTableResponse_Result_ColumnDefaultTypeInternal;
extern CreateTableResponse_Result_ColumnDefaultTypeInternal _CreateTableResponse_Result_Column_default_instance_;
class CreateTableResponse_Result_Constrain;
class CreateTableResponse_Result_ConstrainDefaultTypeInternal;
extern CreateTableResponse_Result_ConstrainDefaultTypeInternal _CreateTableResponse_Result_Constrain_default_instance_;
class CreateTableResponse_Result_OptionsEntry_DoNotUse;
class CreateTableResponse_Result_OptionsEntry_DoNotUseDefaultTypeInternal;
extern CreateTableResponse_Result_OptionsEntry_DoNotUseDefaultTypeInternal _CreateTableResponse_Result_OptionsEntry_DoNotUse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace MySqlParseService
PROTOBUF_NAMESPACE_OPEN
template<> ::MySqlParseService::CreateTableResponse* Arena::CreateMaybeMessage<::MySqlParseService::CreateTableResponse>(Arena*);
template<> ::MySqlParseService::CreateTableResponse_Result* Arena::CreateMaybeMessage<::MySqlParseService::CreateTableResponse_Result>(Arena*);
template<> ::MySqlParseService::CreateTableResponse_Result_Column* Arena::CreateMaybeMessage<::MySqlParseService::CreateTableResponse_Result_Column>(Arena*);
template<> ::MySqlParseService::CreateTableResponse_Result_Constrain* Arena::CreateMaybeMessage<::MySqlParseService::CreateTableResponse_Result_Constrain>(Arena*);
template<> ::MySqlParseService::CreateTableResponse_Result_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::MySqlParseService::CreateTableResponse_Result_OptionsEntry_DoNotUse>(Arena*);
template<> ::MySqlParseService::Request* Arena::CreateMaybeMessage<::MySqlParseService::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MySqlParseService {

// ===================================================================

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);

  // uint32 server_version = 2;
  void clear_server_version();
  static const int kServerVersionFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version() const;
  void set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:MySqlParseService.Request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResponse_Result_Column :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.CreateTableResponse.Result.Column) */ {
 public:
  CreateTableResponse_Result_Column();
  virtual ~CreateTableResponse_Result_Column();

  CreateTableResponse_Result_Column(const CreateTableResponse_Result_Column& from);
  CreateTableResponse_Result_Column(CreateTableResponse_Result_Column&& from) noexcept
    : CreateTableResponse_Result_Column() {
    *this = ::std::move(from);
  }

  inline CreateTableResponse_Result_Column& operator=(const CreateTableResponse_Result_Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResponse_Result_Column& operator=(CreateTableResponse_Result_Column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResponse_Result_Column& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResponse_Result_Column* internal_default_instance() {
    return reinterpret_cast<const CreateTableResponse_Result_Column*>(
               &_CreateTableResponse_Result_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateTableResponse_Result_Column* other);
  friend void swap(CreateTableResponse_Result_Column& a, CreateTableResponse_Result_Column& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResponse_Result_Column* New() const final {
    return CreateMaybeMessage<CreateTableResponse_Result_Column>(nullptr);
  }

  CreateTableResponse_Result_Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResponse_Result_Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResponse_Result_Column& from);
  void MergeFrom(const CreateTableResponse_Result_Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResponse_Result_Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.CreateTableResponse.Result.Column";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string attributes = 3;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:MySqlParseService.CreateTableResponse.Result.Column)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResponse_Result_Constrain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.CreateTableResponse.Result.Constrain) */ {
 public:
  CreateTableResponse_Result_Constrain();
  virtual ~CreateTableResponse_Result_Constrain();

  CreateTableResponse_Result_Constrain(const CreateTableResponse_Result_Constrain& from);
  CreateTableResponse_Result_Constrain(CreateTableResponse_Result_Constrain&& from) noexcept
    : CreateTableResponse_Result_Constrain() {
    *this = ::std::move(from);
  }

  inline CreateTableResponse_Result_Constrain& operator=(const CreateTableResponse_Result_Constrain& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResponse_Result_Constrain& operator=(CreateTableResponse_Result_Constrain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResponse_Result_Constrain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResponse_Result_Constrain* internal_default_instance() {
    return reinterpret_cast<const CreateTableResponse_Result_Constrain*>(
               &_CreateTableResponse_Result_Constrain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateTableResponse_Result_Constrain* other);
  friend void swap(CreateTableResponse_Result_Constrain& a, CreateTableResponse_Result_Constrain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResponse_Result_Constrain* New() const final {
    return CreateMaybeMessage<CreateTableResponse_Result_Constrain>(nullptr);
  }

  CreateTableResponse_Result_Constrain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResponse_Result_Constrain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResponse_Result_Constrain& from);
  void MergeFrom(const CreateTableResponse_Result_Constrain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResponse_Result_Constrain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.CreateTableResponse.Result.Constrain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string columns = 3;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 3;
  const std::string& columns(int index) const;
  std::string* mutable_columns(int index);
  void set_columns(int index, const std::string& value);
  void set_columns(int index, std::string&& value);
  void set_columns(int index, const char* value);
  void set_columns(int index, const char* value, size_t size);
  std::string* add_columns();
  void add_columns(const std::string& value);
  void add_columns(std::string&& value);
  void add_columns(const char* value);
  void add_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_columns();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:MySqlParseService.CreateTableResponse.Result.Constrain)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> columns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResponse_Result_OptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateTableResponse_Result_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateTableResponse_Result_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CreateTableResponse_Result_OptionsEntry_DoNotUse();
  CreateTableResponse_Result_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateTableResponse_Result_OptionsEntry_DoNotUse& other);
  static const CreateTableResponse_Result_OptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateTableResponse_Result_OptionsEntry_DoNotUse*>(&_CreateTableResponse_Result_OptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MySqlParseService.CreateTableResponse.Result.OptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MySqlParseService.CreateTableResponse.Result.OptionsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class CreateTableResponse_Result :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.CreateTableResponse.Result) */ {
 public:
  CreateTableResponse_Result();
  virtual ~CreateTableResponse_Result();

  CreateTableResponse_Result(const CreateTableResponse_Result& from);
  CreateTableResponse_Result(CreateTableResponse_Result&& from) noexcept
    : CreateTableResponse_Result() {
    *this = ::std::move(from);
  }

  inline CreateTableResponse_Result& operator=(const CreateTableResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResponse_Result& operator=(CreateTableResponse_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResponse_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CreateTableResponse_Result*>(
               &_CreateTableResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CreateTableResponse_Result* other);
  friend void swap(CreateTableResponse_Result& a, CreateTableResponse_Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResponse_Result* New() const final {
    return CreateMaybeMessage<CreateTableResponse_Result>(nullptr);
  }

  CreateTableResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResponse_Result& from);
  void MergeFrom(const CreateTableResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.CreateTableResponse.Result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateTableResponse_Result_Column Column;
  typedef CreateTableResponse_Result_Constrain Constrain;

  // accessors -------------------------------------------------------

  // repeated .MySqlParseService.CreateTableResponse.Result.Column columns = 4;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 4;
  ::MySqlParseService::CreateTableResponse_Result_Column* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Column >*
      mutable_columns();
  const ::MySqlParseService::CreateTableResponse_Result_Column& columns(int index) const;
  ::MySqlParseService::CreateTableResponse_Result_Column* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Column >&
      columns() const;

  // repeated .MySqlParseService.CreateTableResponse.Result.Constrain constrains = 5;
  int constrains_size() const;
  void clear_constrains();
  static const int kConstrainsFieldNumber = 5;
  ::MySqlParseService::CreateTableResponse_Result_Constrain* mutable_constrains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Constrain >*
      mutable_constrains();
  const ::MySqlParseService::CreateTableResponse_Result_Constrain& constrains(int index) const;
  ::MySqlParseService::CreateTableResponse_Result_Constrain* add_constrains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Constrain >&
      constrains() const;

  // map<string, string> options = 6;
  int options_size() const;
  void clear_options();
  static const int kOptionsFieldNumber = 6;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_options();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string like_table = 3;
  void clear_like_table();
  static const int kLikeTableFieldNumber = 3;
  const std::string& like_table() const;
  void set_like_table(const std::string& value);
  void set_like_table(std::string&& value);
  void set_like_table(const char* value);
  void set_like_table(const char* value, size_t size);
  std::string* mutable_like_table();
  std::string* release_like_table();
  void set_allocated_like_table(std::string* like_table);

  // bool has_partition = 2;
  void clear_has_partition();
  static const int kHasPartitionFieldNumber = 2;
  bool has_partition() const;
  void set_has_partition(bool value);

  // @@protoc_insertion_point(class_scope:MySqlParseService.CreateTableResponse.Result)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Column > columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Constrain > constrains_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateTableResponse_Result_OptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr like_table_;
  bool has_partition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// -------------------------------------------------------------------

class CreateTableResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySqlParseService.CreateTableResponse) */ {
 public:
  CreateTableResponse();
  virtual ~CreateTableResponse();

  CreateTableResponse(const CreateTableResponse& from);
  CreateTableResponse(CreateTableResponse&& from) noexcept
    : CreateTableResponse() {
    *this = ::std::move(from);
  }

  inline CreateTableResponse& operator=(const CreateTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTableResponse& operator=(CreateTableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTableResponse*>(
               &_CreateTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CreateTableResponse* other);
  friend void swap(CreateTableResponse& a, CreateTableResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResponse* New() const final {
    return CreateMaybeMessage<CreateTableResponse>(nullptr);
  }

  CreateTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTableResponse& from);
  void MergeFrom(const CreateTableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySqlParseService.CreateTableResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parser_2eproto);
    return ::descriptor_table_parser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateTableResponse_Result Result;

  // accessors -------------------------------------------------------

  // repeated .MySqlParseService.CreateTableResponse.Result results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::MySqlParseService::CreateTableResponse_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result >*
      mutable_results();
  const ::MySqlParseService::CreateTableResponse_Result& results(int index) const;
  ::MySqlParseService::CreateTableResponse_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result >&
      results() const;

  // @@protoc_insertion_point(class_scope:MySqlParseService.CreateTableResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string query = 1;
inline void Request::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Request::query() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.Request.query)
  return query_.GetNoArena();
}
inline void Request::set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.Request.query)
}
inline void Request::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.Request.query)
}
inline void Request::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.Request.query)
}
inline void Request::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.Request.query)
}
inline std::string* Request::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.Request.query)
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_query() {
  // @@protoc_insertion_point(field_release:MySqlParseService.Request.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.Request.query)
}

// uint32 server_version = 2;
inline void Request::clear_server_version() {
  server_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request::server_version() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.Request.server_version)
  return server_version_;
}
inline void Request::set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_version_ = value;
  // @@protoc_insertion_point(field_set:MySqlParseService.Request.server_version)
}

// -------------------------------------------------------------------

// CreateTableResponse_Result_Column

// string name = 1;
inline void CreateTableResponse_Result_Column::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResponse_Result_Column::name() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.Column.name)
  return name_.GetNoArena();
}
inline void CreateTableResponse_Result_Column::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.Column.name)
}
inline void CreateTableResponse_Result_Column::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResponse.Result.Column.name)
}
inline void CreateTableResponse_Result_Column::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResponse.Result.Column.name)
}
inline void CreateTableResponse_Result_Column::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResponse.Result.Column.name)
}
inline std::string* CreateTableResponse_Result_Column::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.Column.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResponse_Result_Column::release_name() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResponse.Result.Column.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResponse_Result_Column::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResponse.Result.Column.name)
}

// string type = 2;
inline void CreateTableResponse_Result_Column::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResponse_Result_Column::type() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.Column.type)
  return type_.GetNoArena();
}
inline void CreateTableResponse_Result_Column::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.Column.type)
}
inline void CreateTableResponse_Result_Column::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResponse.Result.Column.type)
}
inline void CreateTableResponse_Result_Column::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResponse.Result.Column.type)
}
inline void CreateTableResponse_Result_Column::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResponse.Result.Column.type)
}
inline std::string* CreateTableResponse_Result_Column::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.Column.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResponse_Result_Column::release_type() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResponse.Result.Column.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResponse_Result_Column::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResponse.Result.Column.type)
}

// repeated string attributes = 3;
inline int CreateTableResponse_Result_Column::attributes_size() const {
  return attributes_.size();
}
inline void CreateTableResponse_Result_Column::clear_attributes() {
  attributes_.Clear();
}
inline const std::string& CreateTableResponse_Result_Column::attributes(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.Column.attributes)
  return attributes_.Get(index);
}
inline std::string* CreateTableResponse_Result_Column::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.Column.attributes)
  return attributes_.Mutable(index);
}
inline void CreateTableResponse_Result_Column::set_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.Column.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void CreateTableResponse_Result_Column::set_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.Column.attributes)
  attributes_.Mutable(index)->assign(std::move(value));
}
inline void CreateTableResponse_Result_Column::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResponse.Result.Column.attributes)
}
inline void CreateTableResponse_Result_Column::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResponse.Result.Column.attributes)
}
inline std::string* CreateTableResponse_Result_Column::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:MySqlParseService.CreateTableResponse.Result.Column.attributes)
  return attributes_.Add();
}
inline void CreateTableResponse_Result_Column::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResponse.Result.Column.attributes)
}
inline void CreateTableResponse_Result_Column::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResponse.Result.Column.attributes)
}
inline void CreateTableResponse_Result_Column::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MySqlParseService.CreateTableResponse.Result.Column.attributes)
}
inline void CreateTableResponse_Result_Column::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MySqlParseService.CreateTableResponse.Result.Column.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateTableResponse_Result_Column::attributes() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.CreateTableResponse.Result.Column.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateTableResponse_Result_Column::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.CreateTableResponse.Result.Column.attributes)
  return &attributes_;
}

// -------------------------------------------------------------------

// CreateTableResponse_Result_Constrain

// string name = 1;
inline void CreateTableResponse_Result_Constrain::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResponse_Result_Constrain::name() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.Constrain.name)
  return name_.GetNoArena();
}
inline void CreateTableResponse_Result_Constrain::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.Constrain.name)
}
inline void CreateTableResponse_Result_Constrain::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResponse.Result.Constrain.name)
}
inline void CreateTableResponse_Result_Constrain::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResponse.Result.Constrain.name)
}
inline void CreateTableResponse_Result_Constrain::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResponse.Result.Constrain.name)
}
inline std::string* CreateTableResponse_Result_Constrain::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.Constrain.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResponse_Result_Constrain::release_name() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResponse.Result.Constrain.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResponse_Result_Constrain::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResponse.Result.Constrain.name)
}

// string type = 2;
inline void CreateTableResponse_Result_Constrain::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResponse_Result_Constrain::type() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.Constrain.type)
  return type_.GetNoArena();
}
inline void CreateTableResponse_Result_Constrain::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.Constrain.type)
}
inline void CreateTableResponse_Result_Constrain::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResponse.Result.Constrain.type)
}
inline void CreateTableResponse_Result_Constrain::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResponse.Result.Constrain.type)
}
inline void CreateTableResponse_Result_Constrain::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResponse.Result.Constrain.type)
}
inline std::string* CreateTableResponse_Result_Constrain::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.Constrain.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResponse_Result_Constrain::release_type() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResponse.Result.Constrain.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResponse_Result_Constrain::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResponse.Result.Constrain.type)
}

// repeated string columns = 3;
inline int CreateTableResponse_Result_Constrain::columns_size() const {
  return columns_.size();
}
inline void CreateTableResponse_Result_Constrain::clear_columns() {
  columns_.Clear();
}
inline const std::string& CreateTableResponse_Result_Constrain::columns(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
  return columns_.Get(index);
}
inline std::string* CreateTableResponse_Result_Constrain::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
  return columns_.Mutable(index);
}
inline void CreateTableResponse_Result_Constrain::set_columns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
  columns_.Mutable(index)->assign(value);
}
inline void CreateTableResponse_Result_Constrain::set_columns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
  columns_.Mutable(index)->assign(std::move(value));
}
inline void CreateTableResponse_Result_Constrain::set_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
}
inline void CreateTableResponse_Result_Constrain::set_columns(int index, const char* value, size_t size) {
  columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
}
inline std::string* CreateTableResponse_Result_Constrain::add_columns() {
  // @@protoc_insertion_point(field_add_mutable:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
  return columns_.Add();
}
inline void CreateTableResponse_Result_Constrain::add_columns(const std::string& value) {
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
}
inline void CreateTableResponse_Result_Constrain::add_columns(std::string&& value) {
  columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
}
inline void CreateTableResponse_Result_Constrain::add_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
}
inline void CreateTableResponse_Result_Constrain::add_columns(const char* value, size_t size) {
  columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateTableResponse_Result_Constrain::columns() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
  return columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateTableResponse_Result_Constrain::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.CreateTableResponse.Result.Constrain.columns)
  return &columns_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateTableResponse_Result

// string name = 1;
inline void CreateTableResponse_Result::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResponse_Result::name() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.name)
  return name_.GetNoArena();
}
inline void CreateTableResponse_Result::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.name)
}
inline void CreateTableResponse_Result::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResponse.Result.name)
}
inline void CreateTableResponse_Result::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResponse.Result.name)
}
inline void CreateTableResponse_Result::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResponse.Result.name)
}
inline std::string* CreateTableResponse_Result::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResponse_Result::release_name() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResponse.Result.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResponse_Result::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResponse.Result.name)
}

// bool has_partition = 2;
inline void CreateTableResponse_Result::clear_has_partition() {
  has_partition_ = false;
}
inline bool CreateTableResponse_Result::has_partition() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.has_partition)
  return has_partition_;
}
inline void CreateTableResponse_Result::set_has_partition(bool value) {
  
  has_partition_ = value;
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.has_partition)
}

// string like_table = 3;
inline void CreateTableResponse_Result::clear_like_table() {
  like_table_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTableResponse_Result::like_table() const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.like_table)
  return like_table_.GetNoArena();
}
inline void CreateTableResponse_Result::set_like_table(const std::string& value) {
  
  like_table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MySqlParseService.CreateTableResponse.Result.like_table)
}
inline void CreateTableResponse_Result::set_like_table(std::string&& value) {
  
  like_table_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MySqlParseService.CreateTableResponse.Result.like_table)
}
inline void CreateTableResponse_Result::set_like_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  like_table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MySqlParseService.CreateTableResponse.Result.like_table)
}
inline void CreateTableResponse_Result::set_like_table(const char* value, size_t size) {
  
  like_table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MySqlParseService.CreateTableResponse.Result.like_table)
}
inline std::string* CreateTableResponse_Result::mutable_like_table() {
  
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.like_table)
  return like_table_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTableResponse_Result::release_like_table() {
  // @@protoc_insertion_point(field_release:MySqlParseService.CreateTableResponse.Result.like_table)
  
  return like_table_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableResponse_Result::set_allocated_like_table(std::string* like_table) {
  if (like_table != nullptr) {
    
  } else {
    
  }
  like_table_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), like_table);
  // @@protoc_insertion_point(field_set_allocated:MySqlParseService.CreateTableResponse.Result.like_table)
}

// repeated .MySqlParseService.CreateTableResponse.Result.Column columns = 4;
inline int CreateTableResponse_Result::columns_size() const {
  return columns_.size();
}
inline void CreateTableResponse_Result::clear_columns() {
  columns_.Clear();
}
inline ::MySqlParseService::CreateTableResponse_Result_Column* CreateTableResponse_Result::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Column >*
CreateTableResponse_Result::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.CreateTableResponse.Result.columns)
  return &columns_;
}
inline const ::MySqlParseService::CreateTableResponse_Result_Column& CreateTableResponse_Result::columns(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.columns)
  return columns_.Get(index);
}
inline ::MySqlParseService::CreateTableResponse_Result_Column* CreateTableResponse_Result::add_columns() {
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResponse.Result.columns)
  return columns_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Column >&
CreateTableResponse_Result::columns() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.CreateTableResponse.Result.columns)
  return columns_;
}

// repeated .MySqlParseService.CreateTableResponse.Result.Constrain constrains = 5;
inline int CreateTableResponse_Result::constrains_size() const {
  return constrains_.size();
}
inline void CreateTableResponse_Result::clear_constrains() {
  constrains_.Clear();
}
inline ::MySqlParseService::CreateTableResponse_Result_Constrain* CreateTableResponse_Result::mutable_constrains(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.Result.constrains)
  return constrains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Constrain >*
CreateTableResponse_Result::mutable_constrains() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.CreateTableResponse.Result.constrains)
  return &constrains_;
}
inline const ::MySqlParseService::CreateTableResponse_Result_Constrain& CreateTableResponse_Result::constrains(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.Result.constrains)
  return constrains_.Get(index);
}
inline ::MySqlParseService::CreateTableResponse_Result_Constrain* CreateTableResponse_Result::add_constrains() {
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResponse.Result.constrains)
  return constrains_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result_Constrain >&
CreateTableResponse_Result::constrains() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.CreateTableResponse.Result.constrains)
  return constrains_;
}

// map<string, string> options = 6;
inline int CreateTableResponse_Result::options_size() const {
  return options_.size();
}
inline void CreateTableResponse_Result::clear_options() {
  options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CreateTableResponse_Result::options() const {
  // @@protoc_insertion_point(field_map:MySqlParseService.CreateTableResponse.Result.options)
  return options_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CreateTableResponse_Result::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:MySqlParseService.CreateTableResponse.Result.options)
  return options_.MutableMap();
}

// -------------------------------------------------------------------

// CreateTableResponse

// repeated .MySqlParseService.CreateTableResponse.Result results = 1;
inline int CreateTableResponse::results_size() const {
  return results_.size();
}
inline void CreateTableResponse::clear_results() {
  results_.Clear();
}
inline ::MySqlParseService::CreateTableResponse_Result* CreateTableResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:MySqlParseService.CreateTableResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result >*
CreateTableResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:MySqlParseService.CreateTableResponse.results)
  return &results_;
}
inline const ::MySqlParseService::CreateTableResponse_Result& CreateTableResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:MySqlParseService.CreateTableResponse.results)
  return results_.Get(index);
}
inline ::MySqlParseService::CreateTableResponse_Result* CreateTableResponse::add_results() {
  // @@protoc_insertion_point(field_add:MySqlParseService.CreateTableResponse.results)
  return results_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySqlParseService::CreateTableResponse_Result >&
CreateTableResponse::results() const {
  // @@protoc_insertion_point(field_list:MySqlParseService.CreateTableResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MySqlParseService

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parser_2eproto
